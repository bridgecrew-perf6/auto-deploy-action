name: "Auto Deploy Action"
description: "Auto deploys new versions of (currently only) node packages from their source repo to various target repos."
inputs:
  # Required
  slug:
    description: "A GitHub repo slug for the deploy target"
    required: true

  # Optional
  branch:
    description: "The branch to auto deploy to."
    required: false
  manager:
    description: "The package manager to use."
    required: false
    default: yarn
  package:
    description: "The name of the package."
    required: false
    # DEFAULT: get package name from associated manager
  token:
    description: "A GitHub personal access token with the entire `repo` permission."
    required: false
    default: ${{ github.token }}
  version:
    description: "The version of the package."
    required: false
    # DEFAULT: get version name from associated manager

outputs:
  package:
    description: "The package name from user or manifest file to auto deploy."
    value: ${{ steps.auto-deploy-action.outputs.package }}
  version:
    description: "The package version from user or manifest file to auto deploy."
    value: ${{ steps.auto-deploy-action.outputs.version }}

runs:
  using: composite
  steps:
    - name: Validate required input and environment
      shell: bash
      run: |
        # Make sure slug is set
        if [ "${{ inputs.slug }}" == "" ]; then
          echo "::error title=Slug is not set!::You must specify a GitHub repo slug in order to run this shit."
          exit 47
        fi

        # Make sure manager command exists
        if ! command -v ${{ inputs.manager }} &> /dev/null; then
          echo "::error title=Package manager does not exist!::You must ensure the underlying package manager ${{ inputs.manager }} is installed."
          exit 48
        fi

    - name: Set outputs
      shell: bash
      id: auto-deploy-action
      run: |
        # Set package output
        if [ "${{ inputs.manager }}" == "yarn" ] || [ "${{ inputs.manager }}" == "npm" ]; then
          echo "::set-output name=package::$(node -p "require('./package.json').name")"
        fi

        # Set version output
        if [ "${{ inputs.manager }}" == "yarn" ] || [ "${{ inputs.manager }}" == "npm" ]; then
          echo "::set-output name=version::$(node -p "require('./package.json').version")"
        fi

        # TODO: support other managers
        # TODO: support github refs

    - name: Validate outputs
      shell: bash
      run: |
        # Make sure package is set
        if [ "${{ steps.auto-deploy-action.outputs.package }}" == "" ]; then
          echo "::error title=Package name is empty!::Package either not set or could not autodetect."
          exit 10
        fi
        if [ "${{ steps.auto-deploy-action.outputs.version }}" == "" ]; then
          echo "::error title=Version is empty!::Version either not set or could not autodetect."
          exit 10
        fi

    - name: Clone repo
      uses: actions/checkout@v2
      with:
        repository: ${{ inputs.slug }}
        token: ${{ inputs.token }}
        path: auto-deploy-action-tmp
        fetch-depth: 0

    - name: Enter repo
      shell: bash
      run: |
        cd auto-deploy-action-tmp
        cat .git/HEAD

    - name: Checkout branch
      if: inputs.branch
      shell: bash
      run: |
        echo "we need to checkout the branch ${{ inputs.branch }}"
        # NOTE: will use default branch from clone, if this is set then additional checkout required
        # NOTE: will have to use different command based on whether branch exists?

      # Note: user is responsible for having correct tools and versions installed aka yarn on node14

    # Steps
    # step 2: clone repo
    # step 3: deploy package (command is dynamic based on manager selection)
      # yarn install PACKAGE@VERSION
      # npm install PACKAGE@VERSION
    # step 4: add, commit, push
      # git add . git commit -m "autogenerated message" git push origin
    # step 5: optionally open PR
