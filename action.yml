name: "Auto Deploy Action"
description: "Auto deploys new versions of (currently only) node packages from their source repo to various target repos."
inputs:
  # Required
  slug:
    description: "A GitHub repo slug for the deploy target"
    required: true

  # Optional
  branch:
    description: "The branch to auto deploy to."
    required: false
    # NOTE: will use default branch from clone, if this is set then additional checkout required
    # NOTE: will have to use different command based on whether branch exists?
  manager:
    description: "The package manager to use."
    required: false
    default: yarn
  package:
    description: "The name of the package."
    required: false
    # DEFAULT: get package name from associated manager
  token:
    description: "A GitHub personal access token with the entire `repo` permission."
    required: false
    default: ${{ github.token }}
  version:
    description: "The version of the package."
    required: false
    # DEFAULT: get version name from associated manager

outputs:
  package:
    description: "The package name from user or manifest file to auto deploy."
    value: ${{ steps.auto-deploy-action.outputs.package }}
  version:
    description: "The package version from user or manifest file to auto deploy."
    value: ${{ steps.auto-deploy-action.outputs.version }}

runs:
  using: composite
  steps:
    - name: Validate required input and environment
      shell: bash
      run: |
        # Make sure slug is set
        if [ "${{ inputs.slug }}" == "" ]; then
          echo "::error title=Slug is not set!::You must specify a GitHub repo slug in order to run this shit."
          exit 47
        fi

        # Make sure manager command exists
        if ! command -v ${{ inputs.manager }} &> /dev/null; then
          echo "::error title=Package manager does not exist!::You must ensure the underlying package manager ${{ inputs.manager }} is installed."
          exit 48
        fi

    - name: Set outputs
      shell: bash
      id: auto-deploy-action
      run: |
        # Set package output
        if [ "${{ inputs.manager }}" == "yarn" ] || [ "${{ inputs.manager }}" == "npm" ]; then
          echo "::set-output name=package::$(node -p "require('./package.json').name")"
        fi

        # Set version output
        if [ "${{ inputs.manager }}" == "yarn" ] || [ "${{ inputs.manager }}" == "npm" ]; then
          echo "::set-output name=version::$(node -p "require('./package.json').version")"
        fi

    - name: Print outputs
      shell: bash
      run: |
        echo "${{ steps.auto-deploy-action.outputs.package }}"
        echo "${{ steps.auto-deploy-action.outputs.version }}"



    # - name: Handle inputs and set outputs
    #   id: auto-deploy-action
    #   run: |
    #     # Handle deprecated keys
    #     # For required keys with no defaults this is sufficient
    #     # echo "::set-output name=business-unit::${{ inputs.business-unit || inputs.businessUnit }}"
    #     # echo "::set-output name=publish-token::${{ inputs.publish-token || inputs.publishToken }}"
    #     # echo "::set-output name=package-token::${{ inputs.package-token || inputs.readToken }}"
    #     # echo "::set-output name=ssh-key::${{ inputs.ssh-key || inputs.sshKey }}"

  # Note: user is responsible for having correct tools and versions installed aka yarn on node14

  # Steps
  # step 1: validate input
    # get package, version, manager, etc
  # step 2: clone repo
    # clone repo
    # check out new branch if set
  # step 3: deploy package (command is dynamic based on manager selection)
    # yarn install PACKAGE@VERSION
    # npm install PACKAGE@VERSION
  # step 4: add, commit, push
    # git add . git commit -m "autogenerated message" git push origin
  # step 5: optionally open PR
